<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Scikit-learn学习笔记</title>
    <url>/2020/01/06/Scikit-learn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/01/06/lhU7xiRPI31znON.jpg" alt="timg.jpg"></p>
<p>Scikit-learn，简称为sklearn，是机器学习中非常经典的一个框架。</p>
<p><a href="https://scikit-learn.org/stable/" target="_blank" rel="noopener">sklearn API</a>中关于该框架讲解的十分详细，这里我只是记录一些最基本的操作，将来忘了的时候翻一番。</p>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p>下面的算法是利用KNN算法来对鸢尾花进行分类，由此可见sklearn框架的通用使用方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​```python,monokai</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''sklearn数据的导入'''</span></span><br><span class="line">iris = datasets.load_iris()    <span class="comment"># 导入鸢尾花数据集</span></span><br><span class="line">iris_X = iris.data             <span class="comment"># 属性</span></span><br><span class="line">iris_y = iris.target           <span class="comment"># 标签</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''数据预处理，有不同的方法'''</span></span><br><span class="line">iris_X = preprocessing.scale(iris_X)   <span class="comment"># 标准化数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分训练集和测试集，test_size=0.3表示30%的数据为测试数据'''</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''训练，预测，评估'''</span></span><br><span class="line">knn_model = KNeighborsClassifier()  <span class="comment"># 定义模型</span></span><br><span class="line">knn_model.fit(X_train, y_train)     <span class="comment"># 训练模型</span></span><br><span class="line">y_pre = knn_model.predict(X_test)   <span class="comment"># 预测数据</span></span><br><span class="line">print(accuracy_score(y_test, y_pre))  <span class="comment"># 输出准确率</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 交叉验证</span><br><span class="line"></span><br><span class="line">在具体问题过程中，我们需要选择合适的模型以及确定模型的参数，以使得模型有更好的性能。</span><br><span class="line"></span><br><span class="line">这里学习交叉验证的具体使用方法。</span><br><span class="line"></span><br><span class="line">仍以KNN和鸢尾花数据为例，在KNN算法中，我们需要确定选取前几个邻近数据来进行参考判断，这时候可以使用交叉验证来确定最好的参数。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">import numpy as np</span><br><span class="line">from sklearn import datasets</span><br><span class="line">from sklearn.neighbors import KNeighborsClassifier</span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;sklearn数据的导入&#39;&#39;&#39;</span><br><span class="line">iris &#x3D; datasets.load_iris()    # 导入鸢尾花数据集</span><br><span class="line">iris_X &#x3D; iris.data             # 属性</span><br><span class="line">iris_y &#x3D; iris.target           # 标签</span><br><span class="line"></span><br><span class="line">k_range &#x3D; range(1, 30)</span><br><span class="line">k_scores &#x3D; []</span><br><span class="line"></span><br><span class="line">for k in k_range:</span><br><span class="line">    knn_model &#x3D; KNeighborsClassifier(n_neighbors&#x3D;k)     # 以前k个数据为参考</span><br><span class="line">    &#39;&#39;&#39;for regression&#39;&#39;&#39;</span><br><span class="line">    #loss &#x3D; -cross_val_score(knn_model, iris_X, iris_y, cv&#x3D;10, scoring&#x3D;&#39;neg_mean_squared_error&#39;)</span><br><span class="line">    &#39;&#39;&#39;for classification&#39;&#39;&#39;</span><br><span class="line">    scores &#x3D; cross_val_score(knn_model, iris_X, iris_y, cv&#x3D;10, scoring&#x3D;&#39;accuracy&#39;)  # cv表示将数据分成几份</span><br><span class="line">    k_scores.append(scores.mean())  # 取平均值</span><br><span class="line"></span><br><span class="line">plt.plot(k_range, k_scores)</span><br><span class="line">plt.xlabel(&#39;Value of K for KNN&#39;)</span><br><span class="line">plt.ylabel(&#39;Cross-Validated Accuracy&#39;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/01/06/OaYhjg5mCp6uniZ.jpg" alt="捕获.JPG"></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>scikit-learn</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo绑定域名后评论功能出错</title>
    <url>/2020/01/04/hexo%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%90%8E%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%E5%87%BA%E9%94%99/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26092806&auto=1&height=66"></iframe>

<p>昨天刚刚搞了很久才搞定的评论，今天在绑定域名之后发现登录账户时页面会跳转至博客首页，导致无法登录。</p>
<p>在网上发现了别人也出现了相同的问题，所以记录一下，免得下次更换域名后又不知道该怎么解决了。</p>
<p>本文参考了<a href="https://www.cnblogs.com/zmj97/p/10421872.html。" target="_blank" rel="noopener">https://www.cnblogs.com/zmj97/p/10421872.html。</a></p>
<p>问题出在GitHub Application的申请，之前由于没有绑定自定义域名，所以在申请Github Application的时候我们所填的域名就是 *.github.io , 但是如果自定义了域名的话回调URL要填写自定义域名，否则就会出现上述无法登录的情况。</p>
<p>然后我发现自己找不到之前所申请的记录了，于是又重新申请了一次，信息如下所示：</p>
<p><img src="https://i.loli.net/2020/01/04/dAbZ3WOgvGcmjDu.jpg" alt="捕获.JPG"></p>
<p>注意最后Authorization callback URL中域名的填写，这里还要注意协议是http还是https。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo发布文章后categories和tags页面仍为空解决方法</title>
    <url>/2020/01/03/hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%90%8Ecategories%E5%92%8Ctags%E9%A1%B5%E9%9D%A2%E4%BB%8D%E4%B8%BA%E7%A9%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>hexo发布文章后categories和tags页面仍为空。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>打开themes/ocean/layout/_partial/article.ejs（不同的主题可以略有不同，找到article.ejs即可）</p>
<p>在<code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</code>的div内添加代码：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (page.type === <span class="string">"tags"</span>) &#123; %&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tag-cloud"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tag-cloud-title"</span>&gt;</span><br><span class="line">    &lt;%- <span class="string">"TOTAl : "</span> + site.tags.length %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tag-cloud-tags"</span>&gt;</span><br><span class="line">    &lt;%- tagcloud(&#123;</span><br><span class="line">      min_font: <span class="number">12</span>,</span><br><span class="line">      max_font: <span class="number">30</span>,</span><br><span class="line">      amount: <span class="number">200</span>,</span><br><span class="line">      color: <span class="keyword">true</span>,</span><br><span class="line">      start_color: <span class="string">'#555'</span>,</span><br><span class="line">      end_color: <span class="string">'#111'</span></span><br><span class="line">      &#125;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page.type === <span class="string">'categories'</span>) &#123; %&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"category-all-page"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"category-all-title"</span>&gt;</span><br><span class="line">    &lt;%- <span class="string">"TOTAL : "</span> + site.categories.length %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"category-all"</span>&gt;</span><br><span class="line">    &lt;%- list_categories() %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>然后就可以正常显示了。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
